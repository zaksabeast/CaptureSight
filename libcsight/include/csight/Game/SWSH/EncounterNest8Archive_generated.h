// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENCOUNTERNEST8ARCHIVE_PKNX_STRUCTURES_H_
#define FLATBUFFERS_GENERATED_ENCOUNTERNEST8ARCHIVE_PKNX_STRUCTURES_H_

#include "flatbuffers/flatbuffers.h"

namespace pkNX {
namespace Structures {

struct EncounterNest8Archive;
struct EncounterNest8ArchiveBuilder;

struct EncounterNest8Table;
struct EncounterNest8TableBuilder;

struct EncounterNest8;
struct EncounterNest8Builder;

struct EncounterNest8Archive FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EncounterNest8ArchiveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TABLES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8Table>> *Tables() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8Table>> *>(VT_TABLES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TABLES) &&
           verifier.VerifyVector(Tables()) &&
           verifier.VerifyVectorOfTables(Tables()) &&
           verifier.EndTable();
  }
};

struct EncounterNest8ArchiveBuilder {
  typedef EncounterNest8Archive Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Tables(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8Table>>> Tables) {
    fbb_.AddOffset(EncounterNest8Archive::VT_TABLES, Tables);
  }
  explicit EncounterNest8ArchiveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EncounterNest8Archive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EncounterNest8Archive>(end);
    return o;
  }
};

inline flatbuffers::Offset<EncounterNest8Archive> CreateEncounterNest8Archive(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8Table>>> Tables = 0) {
  EncounterNest8ArchiveBuilder builder_(_fbb);
  builder_.add_Tables(Tables);
  return builder_.Finish();
}

inline flatbuffers::Offset<EncounterNest8Archive> CreateEncounterNest8ArchiveDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8Table>> *Tables = nullptr) {
  auto Tables__ = Tables ? _fbb.CreateVector<flatbuffers::Offset<pkNX::Structures::EncounterNest8Table>>(*Tables) : 0;
  return pkNX::Structures::CreateEncounterNest8Archive(
      _fbb,
      Tables__);
}

struct EncounterNest8Table FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EncounterNest8TableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TABLEID = 4,
    VT_GAMEVERSION = 6,
    VT_ENTRIES = 8
  };
  uint64_t TableID() const {
    return GetField<uint64_t>(VT_TABLEID, 0);
  }
  uint32_t GameVersion() const {
    return GetField<uint32_t>(VT_GAMEVERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8>> *Entries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8>> *>(VT_ENTRIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TABLEID) &&
           VerifyField<uint32_t>(verifier, VT_GAMEVERSION) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(Entries()) &&
           verifier.VerifyVectorOfTables(Entries()) &&
           verifier.EndTable();
  }
};

struct EncounterNest8TableBuilder {
  typedef EncounterNest8Table Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_TableID(uint64_t TableID) {
    fbb_.AddElement<uint64_t>(EncounterNest8Table::VT_TABLEID, TableID, 0);
  }
  void add_GameVersion(uint32_t GameVersion) {
    fbb_.AddElement<uint32_t>(EncounterNest8Table::VT_GAMEVERSION, GameVersion, 0);
  }
  void add_Entries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8>>> Entries) {
    fbb_.AddOffset(EncounterNest8Table::VT_ENTRIES, Entries);
  }
  explicit EncounterNest8TableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EncounterNest8Table> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EncounterNest8Table>(end);
    return o;
  }
};

inline flatbuffers::Offset<EncounterNest8Table> CreateEncounterNest8Table(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t TableID = 0,
    uint32_t GameVersion = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8>>> Entries = 0) {
  EncounterNest8TableBuilder builder_(_fbb);
  builder_.add_TableID(TableID);
  builder_.add_Entries(Entries);
  builder_.add_GameVersion(GameVersion);
  return builder_.Finish();
}

inline flatbuffers::Offset<EncounterNest8Table> CreateEncounterNest8TableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t TableID = 0,
    uint32_t GameVersion = 0,
    const std::vector<flatbuffers::Offset<pkNX::Structures::EncounterNest8>> *Entries = nullptr) {
  auto Entries__ = Entries ? _fbb.CreateVector<flatbuffers::Offset<pkNX::Structures::EncounterNest8>>(*Entries) : 0;
  return pkNX::Structures::CreateEncounterNest8Table(
      _fbb,
      TableID,
      GameVersion,
      Entries__);
}

struct EncounterNest8 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EncounterNest8Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTRYINDEX = 4,
    VT_SPECIES = 6,
    VT_ALTFORM = 8,
    VT_LEVELTABLEID = 10,
    VT_ABILITY = 12,
    VT_ISGIGANTAMAX = 14,
    VT_DROPTABLEID = 16,
    VT_BONUSTABLEID = 18,
    VT_PROBABILITIES = 20,
    VT_GENDER = 22,
    VT_FLAWLESSIVS = 24
  };
  uint32_t EntryIndex() const {
    return GetField<uint32_t>(VT_ENTRYINDEX, 0);
  }
  uint32_t Species() const {
    return GetField<uint32_t>(VT_SPECIES, 0);
  }
  uint32_t AltForm() const {
    return GetField<uint32_t>(VT_ALTFORM, 0);
  }
  uint64_t LevelTableID() const {
    return GetField<uint64_t>(VT_LEVELTABLEID, 0);
  }
  int8_t Ability() const {
    return GetField<int8_t>(VT_ABILITY, 0);
  }
  bool IsGigantamax() const {
    return GetField<uint8_t>(VT_ISGIGANTAMAX, 0) != 0;
  }
  uint64_t DropTableID() const {
    return GetField<uint64_t>(VT_DROPTABLEID, 0);
  }
  uint64_t BonusTableID() const {
    return GetField<uint64_t>(VT_BONUSTABLEID, 0);
  }
  const flatbuffers::Vector<uint32_t> *Probabilities() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_PROBABILITIES);
  }
  int8_t Gender() const {
    return GetField<int8_t>(VT_GENDER, 0);
  }
  int8_t FlawlessIVs() const {
    return GetField<int8_t>(VT_FLAWLESSIVS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ENTRYINDEX) &&
           VerifyField<uint32_t>(verifier, VT_SPECIES) &&
           VerifyField<uint32_t>(verifier, VT_ALTFORM) &&
           VerifyField<uint64_t>(verifier, VT_LEVELTABLEID) &&
           VerifyField<int8_t>(verifier, VT_ABILITY) &&
           VerifyField<uint8_t>(verifier, VT_ISGIGANTAMAX) &&
           VerifyField<uint64_t>(verifier, VT_DROPTABLEID) &&
           VerifyField<uint64_t>(verifier, VT_BONUSTABLEID) &&
           VerifyOffset(verifier, VT_PROBABILITIES) &&
           verifier.VerifyVector(Probabilities()) &&
           VerifyField<int8_t>(verifier, VT_GENDER) &&
           VerifyField<int8_t>(verifier, VT_FLAWLESSIVS) &&
           verifier.EndTable();
  }
};

struct EncounterNest8Builder {
  typedef EncounterNest8 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_EntryIndex(uint32_t EntryIndex) {
    fbb_.AddElement<uint32_t>(EncounterNest8::VT_ENTRYINDEX, EntryIndex, 0);
  }
  void add_Species(uint32_t Species) {
    fbb_.AddElement<uint32_t>(EncounterNest8::VT_SPECIES, Species, 0);
  }
  void add_AltForm(uint32_t AltForm) {
    fbb_.AddElement<uint32_t>(EncounterNest8::VT_ALTFORM, AltForm, 0);
  }
  void add_LevelTableID(uint64_t LevelTableID) {
    fbb_.AddElement<uint64_t>(EncounterNest8::VT_LEVELTABLEID, LevelTableID, 0);
  }
  void add_Ability(int8_t Ability) {
    fbb_.AddElement<int8_t>(EncounterNest8::VT_ABILITY, Ability, 0);
  }
  void add_IsGigantamax(bool IsGigantamax) {
    fbb_.AddElement<uint8_t>(EncounterNest8::VT_ISGIGANTAMAX, static_cast<uint8_t>(IsGigantamax), 0);
  }
  void add_DropTableID(uint64_t DropTableID) {
    fbb_.AddElement<uint64_t>(EncounterNest8::VT_DROPTABLEID, DropTableID, 0);
  }
  void add_BonusTableID(uint64_t BonusTableID) {
    fbb_.AddElement<uint64_t>(EncounterNest8::VT_BONUSTABLEID, BonusTableID, 0);
  }
  void add_Probabilities(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Probabilities) {
    fbb_.AddOffset(EncounterNest8::VT_PROBABILITIES, Probabilities);
  }
  void add_Gender(int8_t Gender) {
    fbb_.AddElement<int8_t>(EncounterNest8::VT_GENDER, Gender, 0);
  }
  void add_FlawlessIVs(int8_t FlawlessIVs) {
    fbb_.AddElement<int8_t>(EncounterNest8::VT_FLAWLESSIVS, FlawlessIVs, 0);
  }
  explicit EncounterNest8Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EncounterNest8> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EncounterNest8>(end);
    return o;
  }
};

inline flatbuffers::Offset<EncounterNest8> CreateEncounterNest8(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t EntryIndex = 0,
    uint32_t Species = 0,
    uint32_t AltForm = 0,
    uint64_t LevelTableID = 0,
    int8_t Ability = 0,
    bool IsGigantamax = false,
    uint64_t DropTableID = 0,
    uint64_t BonusTableID = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Probabilities = 0,
    int8_t Gender = 0,
    int8_t FlawlessIVs = 0) {
  EncounterNest8Builder builder_(_fbb);
  builder_.add_BonusTableID(BonusTableID);
  builder_.add_DropTableID(DropTableID);
  builder_.add_LevelTableID(LevelTableID);
  builder_.add_Probabilities(Probabilities);
  builder_.add_AltForm(AltForm);
  builder_.add_Species(Species);
  builder_.add_EntryIndex(EntryIndex);
  builder_.add_FlawlessIVs(FlawlessIVs);
  builder_.add_Gender(Gender);
  builder_.add_IsGigantamax(IsGigantamax);
  builder_.add_Ability(Ability);
  return builder_.Finish();
}

inline flatbuffers::Offset<EncounterNest8> CreateEncounterNest8Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t EntryIndex = 0,
    uint32_t Species = 0,
    uint32_t AltForm = 0,
    uint64_t LevelTableID = 0,
    int8_t Ability = 0,
    bool IsGigantamax = false,
    uint64_t DropTableID = 0,
    uint64_t BonusTableID = 0,
    const std::vector<uint32_t> *Probabilities = nullptr,
    int8_t Gender = 0,
    int8_t FlawlessIVs = 0) {
  auto Probabilities__ = Probabilities ? _fbb.CreateVector<uint32_t>(*Probabilities) : 0;
  return pkNX::Structures::CreateEncounterNest8(
      _fbb,
      EntryIndex,
      Species,
      AltForm,
      LevelTableID,
      Ability,
      IsGigantamax,
      DropTableID,
      BonusTableID,
      Probabilities__,
      Gender,
      FlawlessIVs);
}

inline const pkNX::Structures::EncounterNest8Archive *GetEncounterNest8Archive(const void *buf) {
  return flatbuffers::GetRoot<pkNX::Structures::EncounterNest8Archive>(buf);
}

inline const pkNX::Structures::EncounterNest8Archive *GetSizePrefixedEncounterNest8Archive(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<pkNX::Structures::EncounterNest8Archive>(buf);
}

inline bool VerifyEncounterNest8ArchiveBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<pkNX::Structures::EncounterNest8Archive>(nullptr);
}

inline bool VerifySizePrefixedEncounterNest8ArchiveBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<pkNX::Structures::EncounterNest8Archive>(nullptr);
}

inline const char *EncounterNest8ArchiveExtension() {
  return "bin";
}

inline void FinishEncounterNest8ArchiveBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pkNX::Structures::EncounterNest8Archive> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEncounterNest8ArchiveBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pkNX::Structures::EncounterNest8Archive> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Structures
}  // namespace pkNX

#endif  // FLATBUFFERS_GENERATED_ENCOUNTERNEST8ARCHIVE_PKNX_STRUCTURES_H_
